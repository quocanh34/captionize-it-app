import os
import torch
import torchvision.transforms as transforms
from PIL import Image


def print_examples(model, device, dataset):
    """
    Print example captions generated by the model.

    Args:
        model (torch.nn.Module): Trained model.
        device (torch.device): Device (cpu or gpu) to run the model.
        dataset (FlickrDataset): Dataset used for training.
    """

    transform = transforms.Compose(
        [
            transforms.Resize((299, 299)),
            transforms.ToTensor(),
            transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),
        ]
    )
    test_img1 = transform(Image.open("test_examples/cat_child.jpg").convert("RGB")).unsqueeze(0)
    print("Example 1 CORRECT: A girl is hugging a cat on a bed")
    print(
        "Example 1 OUTPUT: "
        + " ".join(model.caption_image(test_img1.to(device), dataset.vocab))
    )

def save_checkpoint(state, step, checkpoint_dir="./checkpoint", filename="my_checkpoint.pth.tar"):
    """
    Save a checkpoint during training.

    Args:
        state (dict): Model state dictionary and optimizer state dictionary.
        step (int): Training step at which the checkpoint is saved.
        checkpoint_dir (str): Directory to save the checkpoint (default: "./checkpoint").
        filename (str): Name of the checkpoint file (default: "my_checkpoint.pth.tar").
    """

    print("Saving checkpoint...")

    if step==5000:
        os.mkdir("checkpoint/")
        torch.save(state, f"{checkpoint_dir}/{step}_{filename}")
    else:
        torch.save(state, f"{checkpoint_dir}/{step}_{filename}")

def load_checkpoint(checkpoint, model, optimizer):
    """
    Load a checkpoint.

    Args:
        checkpoint (dict): Saved checkpoint.
        model (torch.nn.Module): Model to load the checkpoint into.
        optimizer (torch.optim.Optimizer): Optimizer to load the checkpoint into.

    Returns:
        int: Training step at which the model was saved.
    """

    print("Loading checkpoint...")
    model.load_state_dict(checkpoint["state_dict"])
    optimizer.load_state_dict(checkpoint["optimizer"])
    step = checkpoint["step"]
    return step